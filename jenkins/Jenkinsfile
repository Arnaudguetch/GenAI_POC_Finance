pipeline {
    agent any

    environment {
        IMAGE_NAME = "genai_poc_finance"
        STREAMLIT_CONTAINER = "streamlit_app"
        DATA_HOST_PATH = "${WORKSPACE}/data"
    }

    stages {
        stage("Checkout develop-branch") {
            steps {
                script {
                    echo "Checkout develop-branch"
                    sh '''
                      git fetch origin develop-branch
                      git checkout -B develop-branch origin/develop-branch
                    '''
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                    echo "Build image Docker (contexte = racine)"
                    sh 'docker build -t ${IMAGE_NAME} -f dockerfile/Dockerfile .'
                }
            }
        }

        stage("Run main.py (ML)") {
            steps {
                script {
                    echo "Exécution de main.py dans un conteneur (avec /data monté)"
                    sh '''
                      mkdir -p ${WORKSPACE}/data
                      docker run --rm -v ${WORKSPACE}/data:/data ${IMAGE_NAME} python3 /source/main.py
                    '''
                }
            }
        }

        stage("Checkout test-branch") {
            steps {
                script {
                    echo "Checkout test-branch"
                    sh '''
                      git fetch origin test-branch
                      git checkout -B test-branch origin/test-branch
                    '''
                }
            }
        }

        stage("Run Unit Tests (using test-branch code)") {
            steps {
                script {
                    echo "Lancement des tests unitaires depuis test-branch..."
            sh "rm -rf /tmp/test-branch"
            sh "git clone -b test-branch https://github.com/Arnaudguetch/GenAI_POC_Finance.git /tmp/test-branch"
            sh "docker run --rm -v /tmp/test-branch:/source -v /tmp/test-branch/data:/data ${IMAGE_NAME} bash -lc 'cd /source && pytest tests/test_main.py --maxfail=1 --disable-warnings -q'"
            }
        }

        stage("Deploy Streamlit App (detached)") {
            steps {
                script {
                    echo "Déploiement Streamlit (démarrage détaché)"
                    sh '''
                      docker rm -f ${STREAMLIT_CONTAINER} 2>/dev/null || true

                      docker run -d --name ${STREAMLIT_CONTAINER} -p 8501:8501 \
                        -v ${WORKSPACE}:/source -v ${WORKSPACE}/data:/data \
                        ${IMAGE_NAME} \
                        bash -lc "streamlit run /source/app.py --server.port=8501 --server.address=0.0.0.0"
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "======== Pipeline terminé ========"
        }
        success {
            echo "======== Pipeline exécuté avec succès! ========="
        }
        failure {
            echo "======== Pipeline échoué! ========="
        }
    }
}
