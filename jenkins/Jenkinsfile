pipeline{
    agent any
    
    environment {
        DOCKER_COMPOSE = "docker-compose -f docker-compose.yml"
        PYTHON = "python3"
        IMAGE_NAME = "genai_poc_finance_source"
    }

    stages{
        stage("Checkout") {
            steps{
                checkout scm
            }
        }
        stage("Build Docker Image (source)") {
            when {
                allOf {
                    expression { env.CHANGE_TARGET == "master" }
                    changeRequest()
                }
            }
            steps {
                script { 
                    echo "Construction de l'image Docker pour source..."
                    sh "docker build -t ${IMAGE_NAME} -f dockerfile/Dockerfile ./source"
                }
            }
        }

        stage("Run ML from develop-branch") {
            when {
                allOf {
                    // Cas PR -> master
                    expression { env.CHANGE_TARGET == "master" }
                    changeRequest()
                }
            }
            steps {
                script {
                    echo "Pull Resquest détectèe vers master !!"
                    echo "Exécution de main.py depuis develop-branch..."
                    sh "git fetch origin develop-branch:develop-branch"
                    sh "git checkout develop-branch"
                    sh "${PYTHON} source/main.py"
                }
            }
        }

        stage("Unit Tests from test-branch") { 
            when {
                allOf {
                    expression { env.CHANGE_TARGET == "master "}
                    branch "PR-*"
                }
            }
            steps {
                script {
                    echo "Lancement des tests unitaires depuis test-branch !!"
                    sh "git fetch origin test-branch:test-branch"
                    sh "git checkout test-branch"
                    sh "pytest tests/test_main.py --maxfail=1 --disable-warnings -q"
                }
            }
        }

        stage("Deploy to Master") { 
            when { 
                branch "master"
            }
            steps {
                script {
                    echo "Déploiement de l'application via Docker Compose..."
                    sh "${DOCKER_COMPOSE} down"
                    sh "${DOCKER_COMPOSE} up -d --build"
                }
            }
        }
    }

    post {
        always{
            echo "======== Pipeline terminé ========"
        }
        success{
            echo "======== pipeline executed successfully ========"
        }
        failure{
            echo "======== pipeline execution failed ========"
        }
    }
}
