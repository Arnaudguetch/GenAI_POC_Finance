pipeline {
    agent any

    environment {
        IMAGE_NAME = "genai_app"
        STREAMLIT_CONTAINER = "streamlit_app"
        DATA_HOST_PATH = "${WORKSPACE}/data"
        LOGS_HOST_PATH = "${WORKSPACE}/logs"
    }

    stages {

        stage("Checkout develop-branch") {
            steps {
                script {
                    echo "Checkout develop-branch"
                    sh '''
                    
                        if [ -f ${WORKSPACE}/.git/index.lock ]; then
                            echo "Suppression du fichier index.lock"
                            rm -f ${WORKSPACE}/.git/index.lock
                        fi
                        
                        git reset --hard || true
                        git clean -fdx || true
                        # Checkout de la branche develop-branch
                        git fetch origin develop-branch
                        git checkout -B develop-branch origin/develop-branch
                    '''
                }
            }
        }

        stage("Build Docker Image") {
            steps {
                script {
                    echo "Build de l'image Docker à partir de Dockerfile"
                    sh 'docker build -t ${IMAGE_NAME} -f dockerfile/Dockerfile .'
                }
            }
        }

        stage("Run main.py (ML)") {
            steps {
                script {
                    echo "Exécution de main.py dans un conteneur"
                    sh '''
                        mkdir -p ${DATA_HOST_PATH}
                        docker run --rm \
                            -v ${DATA_HOST_PATH}:/data \
                            -v ${LOGS_HOST_PATH}:/logs \
                            ${IMAGE_NAME} \
                            python3 /source/main.py
                    '''
                }
            }
        }

        stage("Checkout test-branch") {
            steps {
                script {
                    echo "Checkout test-branch"
                    sh '''
                        if [ -f ${WORKSPACE}/.git/index.lock ]; then
                            rm -f ${WORKSPACE}/.git/index.lock
                        fi
                        git reset --hard || true
                        git clean -fdx || true
                        git fetch origin test-branch
                        git checkout -B test-branch origin/test-branch
                    '''
                }
            }
        }

        stage("Run Unit Tests (test-branch)") {
            steps {
                script {
                    echo "Lancement des tests unitaires depuis test-branch"
                    sh """
                        rm -rf /tmp/test-branch
                        git clone -b test-branch https://github.com/Arnaudguetch/GenAI_POC_Finance.git /tmp/test-branch
                        docker run --rm \\
                            -v /tmp/test-branch:/source \\
                            -v /tmp/test-branch/data:/data \\
                            -w /source \\
                            genai_poc_finance \\
                            bash -lc 'export PYTHONPATH=/source && pytest tests/test_main.py --maxfail=1 --disable-warnings -q'
                    """
                }
            }
        }

        stage("Deploy Streamlit App (detached)") {
            steps {
                script {
                    echo "Déploiement de l'application Streamlit"
                    sh '''
                        docker rm -f ${STREAMLIT_CONTAINER} 2>/dev/null || true

                        EXISTING=$(docker ps --filter "publish=8501" --format "{{.ID}}")
                        if [ ! -z "$EXISTING" ]; then
                            docker rm -f $EXISTING
                        fi

                        docker run -d --name ${STREAMLIT_CONTAINER} -p 8501:8501 \
                            -v ${DATA_HOST_PATH}:/data \
                            -v ${LOGS_HOST_PATH}:/logs \
                            ${IMAGE_NAME}

                        echo "Streamlit accessible sur le port 8501"
                    '''
                }
            }
        }
    }

    post {
        always {
            echo "======== Pipeline terminé ========"
        }
        success {
            echo "======== Pipeline exécuté avec succès ! ========="
        }
        failure {
            echo "======== Pipeline échoué ! ========="
        }
    }
}
